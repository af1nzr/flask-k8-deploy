name: CI/CD to Minikube

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ghcr.io/af1nzr/flask-k8
  NAMESPACE: flask-k8-namespace

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      ### ✅ Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      ### ✅ Setup Docker Buildx
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      ### ✅ Login to GHCR
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      ### ✅ Build & Push Docker image
      - name: Build & Push Image
        run: |
          IMAGE_TAG=${IMAGE_NAME}:${GITHUB_SHA::7}
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      ### ✅ Setup kubectl with Minikube kubeconfig
      - name: Setup kubectl for Minikube
        run: |
          echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 -d > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig
          kubectl config use-context minikube

      ### ✅ Create Namespace if missing
      - name: Create Namespace
        run: |
          kubectl get ns $NAMESPACE || kubectl create ns $NAMESPACE

      ### ✅ Create/Update GHCR secret inside K8s
      - name: Create GHCR Secret in K8s
        run: |
          kubectl delete secret ghcr-secret -n $NAMESPACE --ignore-not-found
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ secrets.GHCR_USERNAME }} \
            --docker-password=${{ secrets.GHCR_TOKEN }} \
            -n $NAMESPACE

      ### ✅ Update deployment.yml with new image
      - name: Update Deployment Image
        run: |
          sed -i "s|ghcr.io/af1nzr/flask-k8:latest|${IMAGE_TAG}|g" k8/deployment.yml

      ### ✅ Apply Kubernetes manifests
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8/deployment.yml
          kubectl apply -f k8/service.yml
          kubectl apply -f k8/ingress.yml

      ### ✅ Enable Minikube Ingress if needed
      - name: Enable Ingress Addon
        run: |
          minikube addons enable ingress || true

      ### ✅ Wait for rollout
      - name: Wait for Pods
        run: |
          kubectl rollout status deployment/flask-k8-deployment -n $NAMESPACE

      ### ✅ Add Minikube IP to /etc/hosts
      - name: Add Minikube IP to /etc/hosts
        run: |
          MINIKUBE_IP=$(minikube ip)
          echo "$MINIKUBE_IP flask-k8.example.com" | sudo tee -a /etc/hosts
          echo "✅ App available at http://flask-k8.example.com"
